/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package DatabaseQuery;

public class IdDataRecordVector extends java.util.AbstractList<IdDataRecord> implements java.util.RandomAccess {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected IdDataRecordVector(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IdDataRecordVector obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        DatabaseQueryJavaJNI.delete_IdDataRecordVector(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public IdDataRecordVector(IdDataRecord[] initialElements) {
    this();
    for (IdDataRecord element : initialElements) {
      add(element);
    }
  }

  public IdDataRecordVector(Iterable<IdDataRecord> initialElements) {
    this();
    for (IdDataRecord element : initialElements) {
      add(element);
    }
  }

  public IdDataRecord get(int index) {
    return doGet(index);
  }

  public IdDataRecord set(int index, IdDataRecord e) {
    return doSet(index, e);
  }

  public boolean add(IdDataRecord e) {
    modCount++;
    doAdd(e);
    return true;
  }

  public void add(int index, IdDataRecord e) {
    modCount++;
    doAdd(index, e);
  }

  public IdDataRecord remove(int index) {
    modCount++;
    return doRemove(index);
  }

  protected void removeRange(int fromIndex, int toIndex) {
    modCount++;
    doRemoveRange(fromIndex, toIndex);
  }

  public int size() {
    return doSize();
  }

  public IdDataRecordVector() {
    this(DatabaseQueryJavaJNI.new_IdDataRecordVector__SWIG_0(), true);
  }

  public IdDataRecordVector(IdDataRecordVector other) {
    this(DatabaseQueryJavaJNI.new_IdDataRecordVector__SWIG_1(IdDataRecordVector.getCPtr(other), other), true);
  }

  public long capacity() {
    return DatabaseQueryJavaJNI.IdDataRecordVector_capacity(swigCPtr, this);
  }

  public void reserve(long n) {
    DatabaseQueryJavaJNI.IdDataRecordVector_reserve(swigCPtr, this, n);
  }

  public boolean isEmpty() {
    return DatabaseQueryJavaJNI.IdDataRecordVector_isEmpty(swigCPtr, this);
  }

  public void clear() {
    DatabaseQueryJavaJNI.IdDataRecordVector_clear(swigCPtr, this);
  }

  public IdDataRecordVector(int count, IdDataRecord value) {
    this(DatabaseQueryJavaJNI.new_IdDataRecordVector__SWIG_2(count, IdDataRecord.getCPtr(value), value), true);
  }

  private int doSize() {
    return DatabaseQueryJavaJNI.IdDataRecordVector_doSize(swigCPtr, this);
  }

  private void doAdd(IdDataRecord x) {
    DatabaseQueryJavaJNI.IdDataRecordVector_doAdd__SWIG_0(swigCPtr, this, IdDataRecord.getCPtr(x), x);
  }

  private void doAdd(int index, IdDataRecord x) {
    DatabaseQueryJavaJNI.IdDataRecordVector_doAdd__SWIG_1(swigCPtr, this, index, IdDataRecord.getCPtr(x), x);
  }

  private IdDataRecord doRemove(int index) {
    long cPtr = DatabaseQueryJavaJNI.IdDataRecordVector_doRemove(swigCPtr, this, index);
    return (cPtr == 0) ? null : new IdDataRecord(cPtr, true);
  }

  private IdDataRecord doGet(int index) {
    long cPtr = DatabaseQueryJavaJNI.IdDataRecordVector_doGet(swigCPtr, this, index);
    return (cPtr == 0) ? null : new IdDataRecord(cPtr, true);
  }

  private IdDataRecord doSet(int index, IdDataRecord val) {
    long cPtr = DatabaseQueryJavaJNI.IdDataRecordVector_doSet(swigCPtr, this, index, IdDataRecord.getCPtr(val), val);
    return (cPtr == 0) ? null : new IdDataRecord(cPtr, true);
  }

  private void doRemoveRange(int fromIndex, int toIndex) {
    DatabaseQueryJavaJNI.IdDataRecordVector_doRemoveRange(swigCPtr, this, fromIndex, toIndex);
  }

}
