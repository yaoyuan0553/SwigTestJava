/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include "DatabaseQueryWrapper.h"
#include "DataBasicTypes.h"


typedef bool boolPtr;

SWIGINTERN boolPtr *new_boolPtr(){
  return new bool();
}
SWIGINTERN void delete_boolPtr(boolPtr *self){
  if (self) delete self;
}
SWIGINTERN void boolPtr_assign(boolPtr *self,bool value){
  *self = value;
}
SWIGINTERN bool boolPtr_value(boolPtr *self){
  return *self;
}
SWIGINTERN bool *boolPtr_cast(boolPtr *self){
  return self;
}
SWIGINTERN boolPtr *boolPtr_frompointer(bool *t){
  return (boolPtr *) t;
}

typedef int IntArray;

SWIGINTERN IntArray *new_IntArray(int nelements){
  return new int[nelements]();
}
SWIGINTERN void delete_IntArray(IntArray *self){
  delete [] self;
}
SWIGINTERN int IntArray_getitem(IntArray *self,int index){
  return self[index];
}
SWIGINTERN void IntArray_setitem(IntArray *self,int index,int value){
  self[index] = value;
}
SWIGINTERN int *IntArray_cast(IntArray *self){
  return self;
}
SWIGINTERN IntArray *IntArray_frompointer(int *t){
  return (IntArray *) t;
}

/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(jint count,std::string const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::string >(static_cast<std::vector< std::string >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_string_Sg__doSize(std::vector< std::string > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_1(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doRemove(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::string const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__doGet(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doSet(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::string const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doRemoveRange(std::vector< std::string > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< IndexValue * > *new_std_vector_Sl_IndexValue_Sm__Sg___SWIG_2(jint count,IndexValue *const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< IndexValue * >(static_cast<std::vector< IndexValue * >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_IndexValue_Sm__Sg__doSize(std::vector< IndexValue * > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_IndexValue_Sm__Sg__doAdd__SWIG_0(std::vector< IndexValue * > *self,std::vector< IndexValue * >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_IndexValue_Sm__Sg__doAdd__SWIG_1(std::vector< IndexValue * > *self,jint index,std::vector< IndexValue * >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< IndexValue * >::value_type std_vector_Sl_IndexValue_Sm__Sg__doRemove(std::vector< IndexValue * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          IndexValue * const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< IndexValue * >::value_type const &std_vector_Sl_IndexValue_Sm__Sg__doGet(std::vector< IndexValue * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< IndexValue * >::value_type std_vector_Sl_IndexValue_Sm__Sg__doSet(std::vector< IndexValue * > *self,jint index,std::vector< IndexValue * >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          IndexValue * const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_IndexValue_Sm__Sg__doRemoveRange(std::vector< IndexValue * > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::shared_ptr< IdDataRecord > > *new_std_vector_Sl_std_shared_ptr_Sl_IdDataRecord_Sg__Sg___SWIG_2(jint count,std::shared_ptr< IdDataRecord > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::shared_ptr< IdDataRecord > >(static_cast<std::vector< std::shared_ptr< IdDataRecord > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_shared_ptr_Sl_IdDataRecord_Sg__Sg__doSize(std::vector< std::shared_ptr< IdDataRecord > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_IdDataRecord_Sg__Sg__doAdd__SWIG_0(std::vector< std::shared_ptr< IdDataRecord > > *self,std::vector< std::shared_ptr< IdDataRecord > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_IdDataRecord_Sg__Sg__doAdd__SWIG_1(std::vector< std::shared_ptr< IdDataRecord > > *self,jint index,std::vector< std::shared_ptr< IdDataRecord > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::shared_ptr< IdDataRecord > >::value_type std_vector_Sl_std_shared_ptr_Sl_IdDataRecord_Sg__Sg__doRemove(std::vector< std::shared_ptr< IdDataRecord > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::shared_ptr< IdDataRecord > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::shared_ptr< IdDataRecord > >::value_type const &std_vector_Sl_std_shared_ptr_Sl_IdDataRecord_Sg__Sg__doGet(std::vector< std::shared_ptr< IdDataRecord > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::shared_ptr< IdDataRecord > >::value_type std_vector_Sl_std_shared_ptr_Sl_IdDataRecord_Sg__Sg__doSet(std::vector< std::shared_ptr< IdDataRecord > > *self,jint index,std::vector< std::shared_ptr< IdDataRecord > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::shared_ptr< IdDataRecord > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_IdDataRecord_Sg__Sg__doRemoveRange(std::vector< std::shared_ptr< IdDataRecord > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_new_1boolPtr(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boolPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (boolPtr *)new_boolPtr();
  *(boolPtr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_delete_1boolPtr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  boolPtr *arg1 = (boolPtr *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(boolPtr **)&jarg1; 
  delete_boolPtr(arg1);
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_boolPtr_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  boolPtr *arg1 = (boolPtr *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boolPtr **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  boolPtr_assign(arg1,arg2);
}


SWIGEXPORT jboolean JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_boolPtr_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boolPtr *arg1 = (boolPtr *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boolPtr **)&jarg1; 
  result = (bool)boolPtr_value(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_boolPtr_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boolPtr *arg1 = (boolPtr *) 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boolPtr **)&jarg1; 
  result = (bool *)boolPtr_cast(arg1);
  *(bool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_boolPtr_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  bool *arg1 = (bool *) 0 ;
  boolPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bool **)&jarg1; 
  result = (boolPtr *)boolPtr_frompointer(arg1);
  *(boolPtr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_new_1IntArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  IntArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (IntArray *)new_IntArray(arg1);
  *(IntArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_delete_1IntArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IntArray *arg1 = (IntArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IntArray **)&jarg1; 
  delete_IntArray(arg1);
}


SWIGEXPORT jint JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IntArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  IntArray *arg1 = (IntArray *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IntArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)IntArray_getitem(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IntArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  IntArray *arg1 = (IntArray *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IntArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  IntArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IntArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IntArray *arg1 = (IntArray *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IntArray **)&jarg1; 
  result = (int *)IntArray_cast(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IntArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int *arg1 = (int *) 0 ;
  IntArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  result = (IntArray *)IntArray_frompointer(arg1);
  *(IntArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_new_1StringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_new_1StringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_StringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_StringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_StringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_new_1StringVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_StringVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  try {
    result = std_vector_Sl_std_string_Sg__doSize((std::vector< std::string > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_StringVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  std_vector_Sl_std_string_Sg__doAdd__SWIG_0(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_StringVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__doAdd__SWIG_1(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jstring JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_StringVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_StringVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_StringVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    result = std_vector_Sl_std_string_Sg__doSet(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_StringVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_string_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_new_1IndexValueVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< IndexValue * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< IndexValue * > *)new std::vector< IndexValue * >();
  *(std::vector< IndexValue * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_new_1IndexValueVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< IndexValue * > *arg1 = 0 ;
  std::vector< IndexValue * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< IndexValue * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< IndexValue * > const & reference is null");
    return 0;
  } 
  result = (std::vector< IndexValue * > *)new std::vector< IndexValue * >((std::vector< IndexValue * > const &)*arg1);
  *(std::vector< IndexValue * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValueVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< IndexValue * > *arg1 = (std::vector< IndexValue * > *) 0 ;
  std::vector< IndexValue * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< IndexValue * > **)&jarg1; 
  result = ((std::vector< IndexValue * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValueVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< IndexValue * > *arg1 = (std::vector< IndexValue * > *) 0 ;
  std::vector< IndexValue * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< IndexValue * > **)&jarg1; 
  arg2 = (std::vector< IndexValue * >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValueVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< IndexValue * > *arg1 = (std::vector< IndexValue * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< IndexValue * > **)&jarg1; 
  result = (bool)((std::vector< IndexValue * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValueVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< IndexValue * > *arg1 = (std::vector< IndexValue * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< IndexValue * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_new_1IndexValueVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  IndexValue **arg2 = 0 ;
  IndexValue *temp2 = 0 ;
  std::vector< IndexValue * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  temp2 = *(IndexValue **)&jarg2;
  arg2 = (IndexValue **)&temp2; 
  try {
    result = (std::vector< IndexValue * > *)new_std_vector_Sl_IndexValue_Sm__Sg___SWIG_2(arg1,(IndexValue *const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< IndexValue * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValueVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< IndexValue * > *arg1 = (std::vector< IndexValue * > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< IndexValue * > **)&jarg1; 
  try {
    result = std_vector_Sl_IndexValue_Sm__Sg__doSize((std::vector< IndexValue * > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValueVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< IndexValue * > *arg1 = (std::vector< IndexValue * > *) 0 ;
  std::vector< IndexValue * >::value_type *arg2 = 0 ;
  std::vector< IndexValue * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< IndexValue * > **)&jarg1; 
  temp2 = *(std::vector< IndexValue * >::value_type *)&jarg2;
  arg2 = (std::vector< IndexValue * >::value_type *)&temp2; 
  std_vector_Sl_IndexValue_Sm__Sg__doAdd__SWIG_0(arg1,(IndexValue *const &)*arg2);
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValueVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< IndexValue * > *arg1 = (std::vector< IndexValue * > *) 0 ;
  jint arg2 ;
  std::vector< IndexValue * >::value_type *arg3 = 0 ;
  std::vector< IndexValue * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< IndexValue * > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = *(std::vector< IndexValue * >::value_type *)&jarg3;
  arg3 = (std::vector< IndexValue * >::value_type *)&temp3; 
  try {
    std_vector_Sl_IndexValue_Sm__Sg__doAdd__SWIG_1(arg1,arg2,(IndexValue *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValueVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< IndexValue * > *arg1 = (std::vector< IndexValue * > *) 0 ;
  jint arg2 ;
  std::vector< IndexValue * >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< IndexValue * > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< IndexValue * >::value_type)std_vector_Sl_IndexValue_Sm__Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< IndexValue * >::value_type *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValueVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< IndexValue * > *arg1 = (std::vector< IndexValue * > *) 0 ;
  jint arg2 ;
  std::vector< IndexValue * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< IndexValue * > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< IndexValue * >::value_type *) &std_vector_Sl_IndexValue_Sm__Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< IndexValue * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValueVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< IndexValue * > *arg1 = (std::vector< IndexValue * > *) 0 ;
  jint arg2 ;
  std::vector< IndexValue * >::value_type *arg3 = 0 ;
  std::vector< IndexValue * >::value_type temp3 = 0 ;
  std::vector< IndexValue * >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< IndexValue * > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = *(std::vector< IndexValue * >::value_type *)&jarg3;
  arg3 = (std::vector< IndexValue * >::value_type *)&temp3; 
  try {
    result = (std::vector< IndexValue * >::value_type)std_vector_Sl_IndexValue_Sm__Sg__doSet(arg1,arg2,(IndexValue *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< IndexValue * >::value_type *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValueVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< IndexValue * > *arg1 = (std::vector< IndexValue * > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< IndexValue * > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_IndexValue_Sm__Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_delete_1IndexValueVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< IndexValue * > *arg1 = (std::vector< IndexValue * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< IndexValue * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_new_1IdDataRecordVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< IdDataRecord > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< IdDataRecord > > *)new std::vector< std::shared_ptr< IdDataRecord > >();
  *(std::vector< std::shared_ptr< IdDataRecord > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_new_1IdDataRecordVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< IdDataRecord > > *arg1 = 0 ;
  std::vector< std::shared_ptr< IdDataRecord > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IdDataRecord > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< IdDataRecord > > const & reference is null");
    return 0;
  } 
  result = (std::vector< std::shared_ptr< IdDataRecord > > *)new std::vector< std::shared_ptr< IdDataRecord > >((std::vector< std::shared_ptr< IdDataRecord > > const &)*arg1);
  *(std::vector< std::shared_ptr< IdDataRecord > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IdDataRecordVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< IdDataRecord > > *arg1 = (std::vector< std::shared_ptr< IdDataRecord > > *) 0 ;
  std::vector< std::shared_ptr< IdDataRecord > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IdDataRecord > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< IdDataRecord > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IdDataRecordVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< IdDataRecord > > *arg1 = (std::vector< std::shared_ptr< IdDataRecord > > *) 0 ;
  std::vector< std::shared_ptr< IdDataRecord > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IdDataRecord > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< IdDataRecord > >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IdDataRecordVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< IdDataRecord > > *arg1 = (std::vector< std::shared_ptr< IdDataRecord > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IdDataRecord > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< IdDataRecord > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IdDataRecordVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< IdDataRecord > > *arg1 = (std::vector< std::shared_ptr< IdDataRecord > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IdDataRecord > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_new_1IdDataRecordVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::shared_ptr< IdDataRecord > *arg2 = 0 ;
  std::shared_ptr< IdDataRecord > tempnull2 ;
  std::vector< std::shared_ptr< IdDataRecord > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = jarg2 ? *(std::shared_ptr< IdDataRecord > **)&jarg2 : &tempnull2; 
  try {
    result = (std::vector< std::shared_ptr< IdDataRecord > > *)new_std_vector_Sl_std_shared_ptr_Sl_IdDataRecord_Sg__Sg___SWIG_2(arg1,(std::shared_ptr< IdDataRecord > const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::shared_ptr< IdDataRecord > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IdDataRecordVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::shared_ptr< IdDataRecord > > *arg1 = (std::vector< std::shared_ptr< IdDataRecord > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IdDataRecord > > **)&jarg1; 
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_IdDataRecord_Sg__Sg__doSize((std::vector< std::shared_ptr< IdDataRecord > > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IdDataRecordVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< IdDataRecord > > *arg1 = (std::vector< std::shared_ptr< IdDataRecord > > *) 0 ;
  std::vector< std::shared_ptr< IdDataRecord > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< IdDataRecord > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< IdDataRecord > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< IdDataRecord > >::value_type **)&jarg2 : &tempnull2; 
  std_vector_Sl_std_shared_ptr_Sl_IdDataRecord_Sg__Sg__doAdd__SWIG_0(arg1,(std::shared_ptr< IdDataRecord > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IdDataRecordVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< IdDataRecord > > *arg1 = (std::vector< std::shared_ptr< IdDataRecord > > *) 0 ;
  jint arg2 ;
  std::vector< std::shared_ptr< IdDataRecord > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< IdDataRecord > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< IdDataRecord > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< IdDataRecord > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_IdDataRecord_Sg__Sg__doAdd__SWIG_1(arg1,arg2,(std::shared_ptr< IdDataRecord > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IdDataRecordVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< IdDataRecord > > *arg1 = (std::vector< std::shared_ptr< IdDataRecord > > *) 0 ;
  jint arg2 ;
  std::vector< std::shared_ptr< IdDataRecord > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IdDataRecord > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_IdDataRecord_Sg__Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::shared_ptr< IdDataRecord > >::value_type **)&jresult = result ? new std::vector< std::shared_ptr< IdDataRecord > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IdDataRecordVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< IdDataRecord > > *arg1 = (std::vector< std::shared_ptr< IdDataRecord > > *) 0 ;
  jint arg2 ;
  std::vector< std::shared_ptr< IdDataRecord > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IdDataRecord > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::shared_ptr< IdDataRecord > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_IdDataRecord_Sg__Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::shared_ptr< IdDataRecord > >::value_type **)&jresult = *result ? new std::vector< std::shared_ptr< IdDataRecord > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IdDataRecordVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< IdDataRecord > > *arg1 = (std::vector< std::shared_ptr< IdDataRecord > > *) 0 ;
  jint arg2 ;
  std::vector< std::shared_ptr< IdDataRecord > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< IdDataRecord > >::value_type tempnull3 ;
  std::vector< std::shared_ptr< IdDataRecord > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< IdDataRecord > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< IdDataRecord > >::value_type **)&jarg3 : &tempnull3; 
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_IdDataRecord_Sg__Sg__doSet(arg1,arg2,(std::shared_ptr< IdDataRecord > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::shared_ptr< IdDataRecord > >::value_type **)&jresult = result ? new std::vector< std::shared_ptr< IdDataRecord > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IdDataRecordVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::shared_ptr< IdDataRecord > > *arg1 = (std::vector< std::shared_ptr< IdDataRecord > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IdDataRecord > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_IdDataRecord_Sg__Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_delete_1IdDataRecordVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< IdDataRecord > > *arg1 = (std::vector< std::shared_ptr< IdDataRecord > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< IdDataRecord > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_hello(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  hello();
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_printStr(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  printStr((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_makeStr(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = makeStr();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_takeStr(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string arg1 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  takeStr(arg1);
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_changeStr(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (int)jarg2; 
  changeStr(arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_fillArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  int *arg1 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  fillArray(arg1,arg2);
  
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_changeIntPointerArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  changeIntPointerArray(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_sleep(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  sleep(arg1);
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_startThreadAndCount(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  startThreadAndCount(arg1);
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_retCounterThread(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  std::thread *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (std::thread *)retCounterThread(arg1);
  *(std::thread **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_waitForThread(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::thread *arg1 = (std::thread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::thread **)&jarg1; 
  waitForThread(arg1);
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_new_1DatabaseQueryManager_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  DatabaseQueryManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (DatabaseQueryManager *)new DatabaseQueryManager((char const *)arg1,(char const *)arg2,(char const *)arg3);
  *(DatabaseQueryManager **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_new_1DatabaseQueryManager_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  DatabaseQueryManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (DatabaseQueryManager *)new DatabaseQueryManager((char const *)arg1,(char const *)arg2);
  *(DatabaseQueryManager **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DatabaseQueryManager_1getBinFilenameWithBinId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  DatabaseQueryManager *arg1 = (DatabaseQueryManager *) 0 ;
  uint32_t arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DatabaseQueryManager **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = ((DatabaseQueryManager const *)arg1)->getBinFilenameWithBinId(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DatabaseQueryManager_1getInfoById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  DatabaseQueryManager *arg1 = (DatabaseQueryManager *) 0 ;
  char *arg2 = (char *) 0 ;
  IndexValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DatabaseQueryManager **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (IndexValue *)((DatabaseQueryManager const *)arg1)->getInfoById((char const *)arg2);
  *(IndexValue **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DatabaseQueryManager_1getInfoByIdList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  DatabaseQueryManager *arg1 = (DatabaseQueryManager *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::vector< IndexValue const * > *arg3 = (std::vector< IndexValue const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DatabaseQueryManager **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  arg3 = *(std::vector< IndexValue const * > **)&jarg3; 
  ((DatabaseQueryManager const *)arg1)->getInfoByIdList((std::vector< std::string > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DatabaseQueryManager_1getAllId_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  DatabaseQueryManager *arg1 = (DatabaseQueryManager *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg3 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(DatabaseQueryManager **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  arg3 = *(std::vector< std::string > **)&jarg3; 
  ((DatabaseQueryManager const *)arg1)->getAllId(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DatabaseQueryManager_1getAllId_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DatabaseQueryManager *arg1 = (DatabaseQueryManager *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DatabaseQueryManager **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  ((DatabaseQueryManager const *)arg1)->getAllId(arg2);
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DatabaseQueryManager_1getAllId_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DatabaseQueryManager *arg1 = (DatabaseQueryManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DatabaseQueryManager **)&jarg1; 
  ((DatabaseQueryManager const *)arg1)->getAllId();
}


SWIGEXPORT jboolean JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DatabaseQueryManager_1getContentById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  DatabaseQueryManager *arg1 = (DatabaseQueryManager *) 0 ;
  char *arg2 = (char *) 0 ;
  DataRecord *arg3 = (DataRecord *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(DatabaseQueryManager **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(DataRecord **)&jarg3; 
  result = (bool)((DatabaseQueryManager const *)arg1)->getContentById((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DatabaseQueryManager_1getContentByIdList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  DatabaseQueryManager *arg1 = (DatabaseQueryManager *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::vector< std::shared_ptr< IdDataRecord > > *arg3 = (std::vector< std::shared_ptr< IdDataRecord > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(DatabaseQueryManager **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  arg3 = *(std::vector< std::shared_ptr< IdDataRecord > > **)&jarg3; 
  ((DatabaseQueryManager const *)arg1)->getContentByIdList((std::vector< std::string > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_delete_1DatabaseQueryManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DatabaseQueryManager *arg1 = (DatabaseQueryManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DatabaseQueryManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DataRecord_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DataRecord *arg1 = (DataRecord *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataRecord **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DataRecord_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataRecord *arg1 = (DataRecord *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataRecord **)&jarg1; 
  result =  ((arg1)->size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DataRecord_1ts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DataRecord *arg1 = (DataRecord *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataRecord **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->ts = arg2;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DataRecord_1ts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataRecord *arg1 = (DataRecord *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataRecord **)&jarg1; 
  result =  ((arg1)->ts);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DataRecord_1as_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DataRecord *arg1 = (DataRecord *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataRecord **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->as = arg2;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DataRecord_1as_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataRecord *arg1 = (DataRecord *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataRecord **)&jarg1; 
  result =  ((arg1)->as);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DataRecord_1cs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DataRecord *arg1 = (DataRecord *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataRecord **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->cs = arg2;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DataRecord_1cs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataRecord *arg1 = (DataRecord *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataRecord **)&jarg1; 
  result =  ((arg1)->cs);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DataRecord_1ds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DataRecord *arg1 = (DataRecord *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataRecord **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->ds = arg2;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DataRecord_1ds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataRecord *arg1 = (DataRecord *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataRecord **)&jarg1; 
  result =  ((arg1)->ds);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DataRecord_1title_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  DataRecord *arg1 = (DataRecord *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataRecord **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->title = *arg2;
}


SWIGEXPORT jstring JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DataRecord_1title_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  DataRecord *arg1 = (DataRecord *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataRecord **)&jarg1; 
  result = (std::string *) & ((arg1)->title);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DataRecord_1_1abstract_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  DataRecord *arg1 = (DataRecord *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataRecord **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->abstract = *arg2;
}


SWIGEXPORT jstring JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DataRecord_1_1abstract_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  DataRecord *arg1 = (DataRecord *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataRecord **)&jarg1; 
  result = (std::string *) & ((arg1)->abstract);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DataRecord_1claim_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  DataRecord *arg1 = (DataRecord *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataRecord **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->claim = *arg2;
}


SWIGEXPORT jstring JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DataRecord_1claim_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  DataRecord *arg1 = (DataRecord *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataRecord **)&jarg1; 
  result = (std::string *) & ((arg1)->claim);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DataRecord_1description_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  DataRecord *arg1 = (DataRecord *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataRecord **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->description = *arg2;
}


SWIGEXPORT jstring JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DataRecord_1description_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  DataRecord *arg1 = (DataRecord *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataRecord **)&jarg1; 
  result = (std::string *) & ((arg1)->description);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_new_1DataRecord_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataRecord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataRecord *)new DataRecord();
  *(DataRecord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_new_1DataRecord_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jstring jarg9) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  DataRecord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint32_t)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = 0;
  if (jarg9) {
    arg9 = (char *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  result = (DataRecord *)new DataRecord(arg1,arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9);
  *(DataRecord **)&jresult = result; 
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_new_1DataRecord_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataRecord *arg1 = 0 ;
  DataRecord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataRecord **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DataRecord && reference is null");
    return 0;
  } 
  result = (DataRecord *)new DataRecord((DataRecord &&)*arg1);
  *(DataRecord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_DataRecord_1stringify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  DataRecord *arg1 = (DataRecord *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataRecord **)&jarg1; 
  result = ((DataRecord const *)arg1)->stringify();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_delete_1DataRecord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataRecord *arg1 = (DataRecord *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataRecord **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValue_1header_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &IndexValue::header;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValue_1pid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IndexValue *arg1 = (IndexValue *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IndexValue **)&jarg1; 
  result = (std::string *) & ((arg1)->pid);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValue_1aid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IndexValue *arg1 = (IndexValue *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IndexValue **)&jarg1; 
  result = (std::string *) & ((arg1)->aid);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValue_1appDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IndexValue *arg1 = (IndexValue *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IndexValue **)&jarg1; 
  result = (std::string *) & ((arg1)->appDate);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValue_1ipc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IndexValue *arg1 = (IndexValue *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IndexValue **)&jarg1; 
  result = (std::string *) & ((arg1)->ipc);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValue_1binId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IndexValue *arg1 = (IndexValue *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IndexValue **)&jarg1; 
  result =  ((arg1)->binId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValue_1ti_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IndexValue *arg1 = (IndexValue *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IndexValue **)&jarg1; 
  result =  ((arg1)->ti);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValue_1ai_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IndexValue *arg1 = (IndexValue *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IndexValue **)&jarg1; 
  result =  ((arg1)->ai);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValue_1ci_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IndexValue *arg1 = (IndexValue *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IndexValue **)&jarg1; 
  result =  ((arg1)->ci);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValue_1di_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IndexValue *arg1 = (IndexValue *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IndexValue **)&jarg1; 
  result =  ((arg1)->di);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValue_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IndexValue *arg1 = (IndexValue *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IndexValue **)&jarg1; 
  result =  ((arg1)->offset);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IndexValue_1stringify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IndexValue *arg1 = (IndexValue *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IndexValue **)&jarg1; 
  result = ((IndexValue const *)arg1)->stringify();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_new_1IndexValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IndexValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IndexValue *)new IndexValue();
  *(IndexValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_delete_1IndexValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IndexValue *arg1 = (IndexValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IndexValue **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IdDataRecord_1pid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  IdDataRecord *arg1 = (IdDataRecord *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< IdDataRecord > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  IdDataRecord > **)&jarg1;
  arg1 = (IdDataRecord *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->pid = *arg2;
}


SWIGEXPORT jstring JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IdDataRecord_1pid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IdDataRecord *arg1 = (IdDataRecord *) 0 ;
  std::shared_ptr< IdDataRecord > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  IdDataRecord > **)&jarg1;
  arg1 = (IdDataRecord *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->pid);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IdDataRecord_1aid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  IdDataRecord *arg1 = (IdDataRecord *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< IdDataRecord > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  IdDataRecord > **)&jarg1;
  arg1 = (IdDataRecord *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->aid = *arg2;
}


SWIGEXPORT jstring JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IdDataRecord_1aid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IdDataRecord *arg1 = (IdDataRecord *) 0 ;
  std::shared_ptr< IdDataRecord > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  IdDataRecord > **)&jarg1;
  arg1 = (IdDataRecord *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->aid);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_IdDataRecord_1dataRecord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IdDataRecord *arg1 = (IdDataRecord *) 0 ;
  std::shared_ptr< IdDataRecord > *smartarg1 = 0 ;
  DataRecord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  IdDataRecord > **)&jarg1;
  arg1 = (IdDataRecord *)(smartarg1 ? smartarg1->get() : 0); 
  result = (DataRecord *)& ((arg1)->dataRecord);
  *(DataRecord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_new_1IdDataRecord(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IdDataRecord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IdDataRecord *)new IdDataRecord();
  
  *(std::shared_ptr<  IdDataRecord > **)&jresult = result ? new std::shared_ptr<  IdDataRecord >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_delete_1IdDataRecord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IdDataRecord *arg1 = (IdDataRecord *) 0 ;
  std::shared_ptr< IdDataRecord > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  IdDataRecord > **)&jarg1;
  arg1 = (IdDataRecord *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_PairII_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Pair< int,int > *arg1 = (Pair< int,int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Pair< int,int > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jint JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_PairII_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Pair< int,int > *arg1 = (Pair< int,int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Pair< int,int > **)&jarg1; 
  result = (int) ((arg1)->first);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_PairII_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Pair< int,int > *arg1 = (Pair< int,int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Pair< int,int > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jint JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_PairII_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Pair< int,int > *arg1 = (Pair< int,int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Pair< int,int > **)&jarg1; 
  result = (int) ((arg1)->second);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_new_1PairII(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Pair< int,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Pair< int,int > *)new Pair< int,int >();
  *(Pair< int,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_DatabaseQuery_DatabaseQueryJavaJNI_delete_1PairII(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Pair< int,int > *arg1 = (Pair< int,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Pair< int,int > **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

